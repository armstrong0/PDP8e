 This module implements some of an RK8E disk controller.
 NOTE: There is an rk8 and an rk8e controller.  This is an RK8E!

  January 10, 2024 - Part of the boot process is working, the first sector of the drive is read, the boot code in that sctor copies the parts of the sector in field 0 and field 1.  The copy is correct.  The controller is set up to read the next sector but the rk8e module does not respond correctly...
  

 This set of files when compiled and fitted implements the interface between the CPU and an SD card.  The SD card provides the storage for the 4 RK05 disk packs.  A typical SD card has the ability to store the equivalent of hundreds of RK05 disk images.  

 I contemplated writing all my own code for this function.  However Rob Doyle
 has already implemented this.  I have included the VHDL code that implements
 it.  The complete source code for the PDP8(x) is available on opencores.

 Rob has written his code in VHDL.  The CPU that I am putting it into is 
 written in verilog.  It is meant to be fitted into an lattice semiconductor
 ICE40 FPGA using yosys and nextpnr.  Yosys does not understand VHDL.

 So there were a number of options:
 	1.) Build and install the GHDL plugin for yosys.  (GHDL is an open source
	compiler for VHDL)
	2.) Hand transcribe VHDL to Verilog.  
	3.) Hand transcribe VHDL to systemverilog.  Then convert to verilog.  
	4.) Install the plugin that allows yosys to process systemverilog.
	5.) ...

I choose option 3.  However there is a program called "sv2v" that will convert 
systemverilog code to verilog code.

During this adventure I found several other useful programs:
	Verilator:  It processes systemverilog and does a bangup job of finding 
	            errors.
	IVerilog:  With the -g2012 flag iverilog will read systemverilog.
	Verible:  This is a family of tools that processes verilog and 
	          systemverilog in a number of was: formating, linting and others.

Typical command lines:

verilator -cc  --top-module sd  sdspi_types.svh sd_types.svh sdspi.sv sd.sv 
verible-verilog-lint sdspi_types.svh sd_types.svh sd.sv
iverilog -g2012 sdspi_types.svh sd_types.svh sdspi.sv sd.sv

Converting the systemverilog to verilog so that it can be merged into the 
PDP8e is accomplished with:

sv2v    sd_types.svh sdspi_types.svh sdspi.sv sd.sv > sd.v	

Rob's sd read asserts dma requests, it has all the parts required to interface with the PDP8e FOR THE DATA PATH 

Initialization is working, as is a 512 byte single sector read.  Note that once the read is started the sdOP that started the read should be set to idle.  There is more testing required: 128 word (256 byte) reads, the write of 256 and 128 words.  

Once dmaREQ is asserted, dmaGNT is asserted and remains that way for the remainder of the transaction. The dma cycles need to interleave with normal CPU cycles.  Normal CPU cycles fetch, defer and execute are all 5 clock cycles long, the clock is about 70 MHz which makes the cycle time about 71 nanoseconds.  If we run the sd card at 20 MHz then a word will be ready every 1/20*16 =  800 nanoseconds.  We should be fine with that,  However the EAE instructions could take 3 + 24 + 1 clock cycles = 400 microseconds still ok.
 
DmaREQ remains asserted for the durration of a transaction.  If I want to interleave with CPU cycles I am going to have to do it external to sd.sv...

The clock dividors are calculated in the file parameters.v.  When fast spi was enabled at 20 MHz, the read sector stopped working.  The fast spi has now been turned down to 4 MHz and read began working again.

Wriing a sector does works, however writing 1/2 a sector does not.
