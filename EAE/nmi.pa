 / test program primarily for fast nmi
   CAM=7621
    SWAB=7431
    SWBA=7447
    DPSZ=7451 
    DPIC=7573 
    DAD=7443
    DLD=7763
    CAMDAD=7663
    DST=7445
    swp=7521
    NMI=7411
    SCA=7441
   
   //sca cla 7640  sc to ac
     *  10 
Caddr, 0

taddr, 3000-1 /uses preincrement
staddr, 4000-1 /uses preincrement

    * 20 
    Kspace, 240 /040   Adding 200 to the values turn 8N1 into 7N2
    Kcr,   215 /015
    Klf,   212 /012
    Knuchr, 0
    Kbit7, 0200
    Kzero, 260 /0060
    K5,     5
    k3,     3
    M1,    -0001
    Km8,   -0005
    M10,   -0012
    zeroF, 0007
    
    Saddr, Sdata
  /  Eaddr, Edata
    Ctmp, 0
    Wcnt, 0
    Wline, -0005
    CURBUF, 1000
    sc1p,  sc1
    nucase, -5
    nu1case, tstdata-etstdata%2  /no priority for operations, left to right
    
    *3000  // test cases low word first, in pairs
tstdata, 2525
     7776
     2525
     7774
     2525
     7770
     2525
     7760
     2525
     7740
     2525
     7700
     2525
     7600
     2525
     7400
     2525
     7000
     2525
     6000
etstdata,0
     

    *4000
Sdata, // note the format, only the first is shown here, the rest are copied in
op1, 0000
     7776
rs1, 0
     0
sc1, 0     

/*4036
/Edata, 0
     
    *200
    cla
    tad nu1case
    dca nucase
    / copy test data into structures
    cla
cp, tad I taddr
    dca I staddr
    tad I taddr
    dca I staddr
    / now increase the saddr by three
    dca I staddr
    dca I staddr
    dca I staddr
    isz nu1case
    jmp cp
   / tad staddr
   / dca Eaddr
   / hlt
    swab 
sts,    cam
        dld
src,    op1
    nmi
    dst
dst1,  rs1
    sca cla
    dca I sc1p
// now adjust the pointers
   tad k5
   tad src
   dca src
   tad k5
   tad dst1
   dca dst1
   tad k5
   tad sc1p
   dca sc1p
   isz nucase
   jmp sts
   / hlt
   6040 / start the uart
   jms dumpoct
   7000
   hlt
 
dumpoct,0    
    cla
  /  tad Eaddr
    tad staddr
    iac
    cma iac / form 2's complemebnt
    tad Saddr
    dca Wcnt
    TAD Saddr
    TAD M1 / autoindex pre-increments so back off by one
    DCA Caddr
Cloop,    TAD I Caddr  / get next word to process
    DCA  Ctmp        / save it away
    tad Kzero
    JMS PrintC
    7000
    tad Kzero
    JMS PrintC
    7000
    tad  Ctmp
    bsw 
    rtr
    rar
    jms octaldigit
    7000 /when debuging using simh it did not seem that the instruction
         /following the jms was not being executed, add 7000 nop it 
         / seemed to work leaving it
    tad Ctmp
    bsw
    jms octaldigit
    7000
    tad Ctmp
    rtr
    rar
    jms octaldigit
    7000
    tad Ctmp
    jms octaldigit
    7000
    isz Wline
    jmp Cloop2
    jmp eofline
Cloop2, jms PrintSp 
Cloop1, isz Wcnt
    jmp Cloop
    jmp i dumpoct
    
eofline, jms CRLF
    cla
    tad Km8
    dca Wline
    jmp Cloop1

octaldigit, 0
    and zeroF
    tad Kzero
    JMS PrintC
    cla
    JMS I octaldigit

PrintSp, 0
    CLA
    TAD Kspace
    TSF
    JMP .-1
    TLS
    CLA
    JMP I PrintSp

/ routine to print a charactor
PrintC, 0
    LOOPC, TSF  / wait until the TTO is empty (flag set)
    JMP LOOPC
    TLS         / put char into TTO 
    CLA
    JMP I PrintC / return

/ routine to print a carrage return / line feed
CRLF, 0
    CLA
    TAD Kcr    / output a carrage return
    JMS PrintC
    CLA
    TAD Klf
    JMS PrintC / output a linefeed
    CLA
    JMP I CRLF




hlt



    



    
    
    
    $


