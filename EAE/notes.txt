common to both mode
ASC SCL 7403
MUL MUY 7405
DVI 7407
NMI 7411
SHL 7413
ASR 7415
LSR 7417
SCA 7441
SCA CLA 7641
// actions are slightly different
B Mode only
SAM 7457 subract AC from MQ
DAD 7443 Double Add
DST 7445 Souble Store
DPIC 7573 Double increment
DCM  7575 Double Complement
DPSZ 7451 Double Precision skip if zero
// diagnostics
MAINDEC-8E-DOLB replaced with maindec-8e-dhkeb
MAINDEC-8E-DOMB replaced by maindec-8e-dhkec
MAINDEC-8E-DORA replaced by maindec-8e-dhkea

from test part 1
skb  (skip if mode b) 7671 DPSZ  CLA MQL 

Some EAE instructions will complete in the fetch machine cycle
Some EAE instructions will complete in the fetch machine cycle BUT extend it.
Some EAE instructions will complete in the Defered cycle BUT extend it.
Some EAE instructions will require F,D and multiple E cycles.

One could (heavily) modify the state machine to keep track of this OR put
hooks in the state machine to allow another state machine: EAE_state_machine,
to sequence the EAE instructions.  To do this the main state machine needs
slight modification to allow it to relinquish control.  I think the latter
approach is better.

Need to take each instruction and determine which sequence it follows.

All mode A instruction execute in F, some use the the next word (SCL,SHL ASR
LSR ASL MUL DVI) MA modified to provide this without any extra states)
SHL,ASR,LSR MUL DVI, and NMI - need extra states to complete, want to make it
loop in F3

7403, 7405, 

August 12 I had put all of the logic in the ac module with the xeception of
small mods in ma and mods in the state_machine.  I broke the thing, it is more
difficult than I thought to keep everything straight.  I am going to put out
EAE control and put it in a new module.  I have to leave the operations in ac
as they operate on registers owned by the ac module (ac, mq, l, gtf)

I currently have standard oper3 instructions executing in F1.  Some of these
operations are forbidden if some of the EAE operations are performed like NMI.
The operations have a defined order and the normal MQ ops are 1 and 2 with the
extended ops third...

So I could move the standard ops to F2 and decode what to do in F1 or add some 
decoding into F1 
