This read me documents some of the thoughts, trial and tribulations in getting
this going.  Read with a grain of salt!  It is roughly chronological. At the
end there is a list thinmgs I would like to do...

Hardware is an ICE40HX8K device on and ICEWERKS module bought from robot shop.

Front panel has a self designed graphic...

Basic PDP8e vs extended Memory PDP8e

In the basic PDP8e the IF and DF registers are forced to zero in the top
module.  In the extended memory case these two registers are driven by the
men_ext module.

In the developed basic PDP8e the GTF and RTF was handle by the interrupt
module.  In this version that will be moved to the extended memory module.
will be present for both basic and extend cases...

The original basic version had an int_iot module that took care of all the
interrupt stuff  in this version I have merged the interrupt and extended
memory handling as they are tightly connected. 





save register (bits 5 - 11)
   0 link
   1 GTF 
   2 Interupt request asserted
   3 interupt inhibit set
   4 interupt system is enabled
   5 USER mode
   6 - 8 instruction field register
   9 - 11 data field register
  
I had wanted to make this really modular, when I thought about the state
machine that runs the computer, I could not see a way to make it a module.  So
I think the state machine has to be in the main module, and that the state is
an input to modules that have been already been developed.  One can build the
state machine as a module and export the state.

An initial cut at a module that processes changes to the PC has been developed,
it is not complete but it looks like it will work...

Try a module to handle the ac...

OK AC extended to do the oper1 and oper2 - Each register has its own module -
ac (and mq) pc, ma (instruction and ma) and a state machine.  Anything that
deals with a particular register should be in one module.  Some like the
conditional operators can be a separate module since they only test the ac and
link registers.  However oper2 has two orphans, one: halt, it needs to reside
with the state machine, the second 'or' the switch register needs to be embedded
in the ac module.


20/11/21   I have been having great difficulty with getting the extended
memory diagnostics to run, it seems to be a matter of timing....  Currently I
am testing for interrupt conditions at the end of instructions, three separate
cases.  I think it might be better to test in F0 and if interrupt is true then
vector to E0 with the call instruction and int_in_prog asserted.  This
primarily affects two modules... state_machine and ma.  Should be able to
modifiy state machine and test everything but interrupts and extended memory.
Then modify ma to insert the jms instruction upon interrupt.   (4000)

However my reading of the handbook indicates my approach is correct...  So I
have ignored the above paragraph and eventually got it working USER mode has
not benn implemented.

The original hardware implementation had a hacked together circuit to convert
RS232 to TTL level and back.  It and verilog for TX and RX seemed to sort of
work.  I was suspicious of the hardware circuit so I redesigned and rebuit it,
it still only sort of worked.  I replace that circuit with a USB to TTL
module.  It still only sort of worked.  So I bit the bullet and tried to run the DEC serial diagnostics. (MAINDEC-8E-D2AB.PB)  However that piece of software
assumes that it is running on a real PDP8E, it uses instruction timing to
measure time intervals.   This requried a redesign of the state machine and
some work on the testbed (in integrate3) in order to simulate correctly.  Both
state machines are in the state_machine folder.

This to do:
1.) implement USER mode.

2.) implement EAE

3.) implement a real time clock

4.) implement an emulated RK05 disk array using an SD card - take a look at
Rob Doyle's PDP8 implentation on opencores!

5.) retarget to a ICE40up5k part - which has enough RAM to implement the full
32K words of memory (actually could implement 128 K as in the PDP8a).  However
the part does not have enough IO pins to drive all the LEDs and sense all of
the switches.  Would take some thought...

5.) Redo the state machine adding one state to each of the 3 (4 Halt) machine
cycles to register the RAM outputs before being used.  Currently this is the
longest delays - should be able to speed the thing up





